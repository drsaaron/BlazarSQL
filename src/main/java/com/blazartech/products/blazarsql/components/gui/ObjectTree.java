/*
 * ObjectTree.java
 *
 * Created on April 14, 2004, 8:31 AM
 */

package com.blazartech.products.blazarsql.components.gui;

import com.blazartech.products.blazarsql.components.gui.objecttree.GetTableInsertSQLAction;
import com.blazartech.products.blazarsql.components.gui.objecttree.GetTableExtractCodeAction;
import com.blazartech.products.blazarsql.components.gui.objecttree.GetTableDataAction;
import com.blazartech.products.blazarsql.components.gui.objecttree.GetTableColumnListAction;
import com.blazartech.products.blazarsql.components.gui.objecttree.ObjectAction;
import com.blazartech.products.blazarsql.components.gui.objecttree.GetStoredProcedureCodeAction;
import com.blazartech.util.gui.exception.ExceptionDisplayPanel;
import com.blazartech.products.blazarsql.components.dataobjects.DBConnection;
import com.blazartech.products.blazarsql.components.dataobjects.ObjectDataAccess;
import com.blazartech.products.blazarsql.components.dataobjects.ObjectDataAccessManager;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * Tree to show database objects.
 * @author  Dr. Scott E. Aaron
 * @version $Id: ObjectTree.java 30 2015-04-23 19:52:54Z aar1069 $
 */

/* $Log: ObjectTree.java,v $
/* Revision 1.7  2008/09/22 22:05:09  aar1069
/* added an action to get the data insert SQL statements.
/*
/* Revision 1.6  2007/07/17 20:32:51  AAR1069
/* Some code clean up.  Use more imports rather than fully qualified class names.
/*
/* Revision 1.5  2006/11/22 20:14:28  aar1069
/* Fixed the tree refresh to remove all from the root node.
/*
/* Revision 1.4  2006/11/22 19:34:33  aar1069
/* Add a popup menu to the tree to allow the user to refresh.
/*
/* Revision 1.3  2006/11/22 19:19:26  aar1069
/* Change the databaseConnectionPanel to be a bounded property.  Rather than
/* always calling the initializeTree method whenever it is set, we will now fire
/* a property change event, which will only happen if the connection panel has changed,
/* and initialize the tree within the event handler.
/*
/* Revision 1.2  2006/10/05 18:30:12  aar1069
/* Added javadoc.
/*
 *******************************************************************************/
@Component
@Scope("prototype")
public class ObjectTree extends JTree implements InitializingBean {
    
    private static final Logger logger = LoggerFactory.getLogger(ObjectTree.class);
    
    private final DefaultMutableTreeNode _root = new DefaultMutableTreeNode();
    
    private final Map<String, TreeNode> _userMap = new HashMap<>();
    
    private static final Cursor _defaultCursor = Cursor.getDefaultCursor();
    
    private static final Cursor _waitCursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);
    
    private static final String PROCEDURE_CODE = "Code";
    
    private static final String TABLE_COLUMNS = "Columns";
    
    private static final String TABLE_EXTRACT = "Extract";
    
    private static final String TABLE_DATA = "Data";
    
    private static final String TABLE_DATA_INSERTS = "Insert SQL";
    
    private final Map<String, ObjectAction> _actionMap = new HashMap<>();
    
    /**
     * Holds value of property databaseConnectionPanel.
     */
    private DatabaseConnectionPanel databaseConnectionPanel;
    
    /** Creates new form BeanForm
     * @throws java.lang.Exception */
    @Override
    public void afterPropertiesSet() throws Exception {
        initComponents();
        
        // add the actions.
        _actionMap.put(PROCEDURE_CODE, new GetStoredProcedureCodeAction(this));
        _actionMap.put(TABLE_COLUMNS, new GetTableColumnListAction(this));
        _actionMap.put(TABLE_DATA, new GetTableDataAction(this));
        _actionMap.put(TABLE_EXTRACT, new GetTableExtractCodeAction(this));
        _actionMap.put(TABLE_DATA_INSERTS, new GetTableInsertSQLAction(this));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _popupMenu = new javax.swing.JPopupMenu();
        _refreshPopupMenuItem = new javax.swing.JMenuItem();

        _refreshPopupMenuItem.setText("Refresh");
        _refreshPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _refreshPopupMenuItemActionPerformed(evt);
            }
        });
        _popupMenu.add(_refreshPopupMenuItem);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                formTreeWillExpand(evt);
            }
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    
    private void handleRefreshEvent(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            _popupMenu.show(this, evt.getX(), evt.getY());
        }
    }
    
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        handleRefreshEvent(evt);
        
    }//GEN-LAST:event_formMouseReleased
    
    private void _refreshPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__refreshPopupMenuItemActionPerformed
        // TODO add your handling code here:
        try {
            refreshTree();
        } catch (java.sql.SQLException e) {
            handleException(e);
        }
    }//GEN-LAST:event__refreshPopupMenuItemActionPerformed
    
    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        // TODO add your handling code here:
        if (evt.getPropertyName().equals("databaseConnectionPanel")) {
            try {
                initializeTree();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }//GEN-LAST:event_formPropertyChange
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // Add your handling code here:
        if (evt.getClickCount() == 2) {
            // Double clicked on node.  If this is an action node, carry it out.
            int selRow = getRowForLocation(evt.getX(), evt.getY());
            TreePath selPath = getPathForLocation(evt.getX(), evt.getY());
            if (selPath != null) {
                switch (selPath.getPathCount()) {
                    case 5 -> {
                        // an action command.
                        ObjectAction actionImpl = (ObjectAction) _actionMap.get(selPath.getLastPathComponent().toString());
                        actionImpl.raiseConnectionPanel();
                        setCursor(_waitCursor);
                        try {
                            actionImpl.doAction(selPath);
                            getDatabaseConnectionPanel().setLastExecutedQuery("<object browser query>");
                        } catch (SQLException e) {
                            handleException(e);
                        }
                        setCursor(_defaultCursor);
                    }
                    case 2 -> {
                        // User ID.  Check if the node has already been completed.
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
                        if (node.getChildCount() == 0) {
                            completeUserNode(node);
                            expandPath(selPath);
                        }
                    }
                }
            }
            
        }
    }//GEN-LAST:event_formMouseClicked
    
    private void formTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_formTreeWillExpand
        // Add your handling code here:
        TreePath nodePath = evt.getPath();
        if (nodePath.getPathCount() == 2) {
            // this is a user node.  Does it have children?
            DefaultMutableTreeNode userNode = (DefaultMutableTreeNode) nodePath.getPathComponent(1);
            if (userNode.getChildCount() == 0) { completeUserNode(userNode); }
        }
    }//GEN-LAST:event_formTreeWillExpand

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        handleRefreshEvent(evt);
    }//GEN-LAST:event_formMousePressed

    @Autowired
    private ObjectDataAccessManager dataAccessManager;
    
    /** Getter for property databaseObjectInformation.
     * @return Value of property databaseObjectInformation.
     *
     */
    public ObjectDataAccess getDatabaseObjectInformation() {
        return dataAccessManager.getObjectDataAccess(getDatabaseConnection().getDatabaseTypeName());
    }
    
    public DBConnection getDatabaseConnection() {
        return getDatabaseConnectionPanel().getDatabaseConnection();
    }

    /**
     * Build all the functions for a user's node.
     * @param userNode the user node
     */
    
    @Value("${blazarSQL.objectTree.label.storedProcedure}")
    private String storedProcedureLabel;
    
    @Value("${blazarSQL.objectTree.label.tables}")
    private String tableLabel;
    
    public void completeUserNode(DefaultMutableTreeNode userNode) {
        try {
            setCursor(_waitCursor);
            
            // add the procedures node.
            String procText = storedProcedureLabel;
            DefaultMutableTreeNode procNode = new DefaultMutableTreeNode(procText);
            Collection<String> procedureList = getDatabaseObjectInformation().getStoredProcedureNames(getDatabaseConnection(), (String) userNode.getUserObject());
            addListToNode(procNode, procedureList, new String[] { PROCEDURE_CODE });
            userNode.add(procNode);
            
            // Add the tables node.
            String tableText = tableLabel;
            DefaultMutableTreeNode tableNode = new DefaultMutableTreeNode(tableText);
            Collection<String> tableList = getDatabaseObjectInformation().getTableNames(getDatabaseConnection(), (String) userNode.getUserObject());
            addListToNode(tableNode, tableList, new String[] { TABLE_COLUMNS, TABLE_EXTRACT, TABLE_DATA, TABLE_DATA_INSERTS });
            userNode.add(tableNode);
        } catch (SQLException e) {
            handleException(e);
        } finally {
            setCursor(_defaultCursor);
        }
    }
    
    /**
     * Handle an exception.
     * @param e the exception
     */
    public void handleException(Exception e) {
        ExceptionDisplayPanel exceptionDisplay = new ExceptionDisplayPanel();
        exceptionDisplay.setException(e);
        JOptionPane.showMessageDialog(this, exceptionDisplay, "Error", JOptionPane.ERROR_MESSAGE);
        logger.error("error: " + e.getMessage(), e);
    }
    
    /**
     * Add a list of objects to a node.
     * @param node node to add
     * @param list object list
     * @param commandList list of commands that can be run against the object
     */
    public void addListToNode(DefaultMutableTreeNode node, Collection<String> list, String[] commandList) {
        Collection<String> stringList = sortStringCollection(list);

        stringList.stream().map((element) -> new DefaultMutableTreeNode(element)).map((objNode) -> {
            node.add(objNode);
            return objNode;
        }).forEachOrdered((objNode) -> {
            for (String commandList1 : commandList) {
                DefaultMutableTreeNode commandNode = new DefaultMutableTreeNode(commandList1);
                objNode.add(commandNode);
            }
        });
    }
    
    private Collection<String> sortStringCollection(Collection<String> stringCollection) {
        List<String> stringList = new ArrayList<>();
        stringList.addAll(stringCollection);
        Collections.sort(stringList);
        return stringList;
    }
    
    /**
     * Initialize the tree
     * @throws java.sql.SQLException database error
     */
    public void initializeTree() throws SQLException {
        // add the root node.
        String rootNodeText = getDatabaseConnectionPanel().getDatabaseConnection().getServerName();
        String dbName = getDatabaseConnectionPanel().getDatabaseConnection().getDatabaseName();
        if (dbName != null && dbName.length() > 0) { rootNodeText += "/" + dbName; }
        rootNodeText += " (" + getDatabaseConnectionPanel().getDatabaseConnection().getDatabaseTypeName() + ")";
        _root.setUserObject(rootNodeText);
        
        /* Add the users.  For performance, we only add the users.  Sub-information will
           be added if and when the user selects a given user. */
        Collection<String> userList = sortStringCollection(getDatabaseObjectInformation().getUserList(getDatabaseConnection()));
        userList.stream().forEach((userId) -> {
            DefaultMutableTreeNode userNode = new DefaultMutableTreeNode(userId);
            _root.add(userNode);
            _userMap.put(userId, userNode);
        });
        
        // add the root to the tree.
        DefaultTreeModel model = (DefaultTreeModel) getModel();
        model.setRoot(_root);
    }
    
    /**
     * Getter for property databaseConnectionPanel.
     * @return Value of property databaseConnectionPanel.
     */
    public DatabaseConnectionPanel getDatabaseConnectionPanel() {
        
        return this.databaseConnectionPanel;
    }
    
    /**
     * Setter for property databaseConnectionPanel.
     * @param databaseConnectionPanel New value of property databaseConnectionPanel.
     * @throws java.sql.SQLException on error talking to database
     */
    public void setDatabaseConnectionPanel(DatabaseConnectionPanel databaseConnectionPanel) throws SQLException {
        
        DatabaseConnectionPanel oldDatabaseConnectionPanel = this.databaseConnectionPanel;
        this.databaseConnectionPanel = databaseConnectionPanel;
        try {
            firePropertyChange("databaseConnectionPanel", oldDatabaseConnectionPanel, databaseConnectionPanel);
        } catch (RuntimeException e) {
            if (e.getCause() instanceof SQLException) {
                SQLException rootCause = (SQLException) e.getCause();
                throw rootCause;
            } else {
                throw e;
            }
        }
    }
    
    /**
     * refresh the tree.
     * @throws java.sql.SQLException on error talking to database
     */
    public void refreshTree() throws SQLException {
        _root.removeAllChildren();
        initializeTree();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu _popupMenu;
    private javax.swing.JMenuItem _refreshPopupMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
