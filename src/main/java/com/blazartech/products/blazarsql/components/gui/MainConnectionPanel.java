/*
 * MainConnectionPanel.java
 *
 * Created on April 9, 2004, 3:41 PM
 */

package com.blazartech.products.blazarsql.components.gui;

import com.blazartech.products.blazarsql.components.writer.ResultSetWriter;
import com.blazartech.utils.gui.fancytab.FancyTabbedPane;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import jakarta.inject.Provider;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * A special tabbed pane that will use fancy tabs.
 *
 * @author  Dr. Scott E. Aaron
 * @version $Id: MainConnectionPanel.java 30 2015-04-23 19:52:54Z aar1069 $
 */

/* $Log: MainConnectionPanel.java,v $
/* Revision 1.2  2007/07/17 19:19:14  AAR1069
/* no message
/*
 *******************************************************************************/
@Component
public class MainConnectionPanel extends FancyTabbedPane implements InitializingBean {
    
    /** Holds value of property statusMessage. */
    private String statusMessage;
    
    private final StatusMessageChangeHandler _statusMessageChangeListener = new StatusMessageChangeHandler();
    
    /** Holds value of property dividerInitialLocation. */
    private int dividerInitialLocation = 50;
    
    /** Creates new form BeanForm */
    @Override
    public void afterPropertiesSet() throws Exception {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setConfirmClose(true);
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                formComponentRemoved(evt);
            }
        });

    }// </editor-fold>//GEN-END:initComponents
    
    private void formComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentRemoved
        // Add your handling code here:
        evt.getChild().removePropertyChangeListener("statusMessage", _statusMessageChangeListener);
        
        // close the connection.
        DatabaseConnectionPanel p = (DatabaseConnectionPanel) evt.getChild();
        try {
            p.closeConnection();
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_formComponentRemoved
    
    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // Add your handling code here:
        if (evt.getChild() instanceof DatabaseConnectionPanel) {
            DatabaseConnectionPanel p = (DatabaseConnectionPanel) evt.getChild();
            
            // Listen for status message changes.
            p.addPropertyChangeListener("statusMessage", _statusMessageChangeListener);
            
            // Raise the new component.
            setSelectedComponent(p);
            
            // put the focus in the editor.
            p.getEditor().requestFocus();
        }
    }//GEN-LAST:event_formComponentAdded
    
    /** Getter for property statusMessage.
     * @return Value of property statusMessage.
     *
     */
    public String getStatusMessage() {
        return this.statusMessage;
    }
    
    /** Setter for property statusMessage.
     * @param statusMessage New value of property statusMessage.
     *
     */
    public void setStatusMessage(String statusMessage) {
        String oldStatusMessage = this.statusMessage;
        this.statusMessage = statusMessage;
        firePropertyChange("statusMessage", oldStatusMessage, statusMessage);
    }
    
    public void executeQuery() throws java.sql.SQLException {
        DatabaseConnectionPanel p = getActiveConnectionPanel();
        p.executeQuery();
    }
    
    @Autowired
    private Provider<DatabaseConnectionPanel> databaseConnectionPanelProvider;
    
    public void addConnection(String userId, String serverName, String databaseName, String databaseTypeName) throws java.sql.SQLException, java.io.IOException, java.lang.ClassNotFoundException, java.lang.InstantiationException, java.lang.IllegalAccessException {
        DatabaseConnectionPanel p = databaseConnectionPanelProvider.get();
        p.setDividerInitialLocation(getDividerInitialLocation());
        p.openConnection(userId, serverName, databaseName, databaseTypeName);
        String title = serverName;
        addTab(title, p);
    }
    
    public void closeActiveConnection() throws java.sql.SQLException {
        DatabaseConnectionPanel p = getActiveConnectionPanel();
        int selIndex = getSelectedIndex();
        removeTabAt(selIndex);
    }
    
    public void saveResults(ResultSetWriter writer, String fileName) throws IOException {
        DatabaseConnectionPanel p = getActiveConnectionPanel();
        p.saveResults(writer, new PrintWriter(new File(fileName)));
    }
    
    protected DatabaseConnectionPanel getActiveConnectionPanel() {
        return (DatabaseConnectionPanel) getSelectedComponent();
    }
    
    public void closeAllConnections() {
        while (getTabCount() > 0) {
            setSelectedIndex(0);
            try {
                closeActiveConnection();
            } catch (SQLException ex) {}
        }
    }
    
    /** Getter for property dividerInitialLocation.
     * @return Value of property dividerInitialLocation.
     *
     */
    public int getDividerInitialLocation() {
        return this.dividerInitialLocation;
    }
    
    /** Setter for property dividerInitialLocation.
     * @param dividerInitialLocation New value of property dividerInitialLocation.
     *
     */
    public void setDividerInitialLocation(int dividerInitialLocation) {
        this.dividerInitialLocation = dividerInitialLocation;
    }
    
    public class StatusMessageChangeHandler implements java.beans.PropertyChangeListener {
        
        @Override
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getPropertyName().equals("statusMessage") && evt.getSource() == getSelectedComponent()) {
                setStatusMessage((String) evt.getNewValue());
            }
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
